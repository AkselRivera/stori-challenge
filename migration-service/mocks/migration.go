// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ports/migration.go
//
// Generated by this command:
//
//	mockgen -destination mocks/migration.go -source pkg/ports/migration.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/AkselRivera/stori-challenge/migration-service/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockMigrationService is a mock of MigrationService interface.
type MockMigrationService struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationServiceMockRecorder
	isgomock struct{}
}

// MockMigrationServiceMockRecorder is the mock recorder for MockMigrationService.
type MockMigrationServiceMockRecorder struct {
	mock *MockMigrationService
}

// NewMockMigrationService creates a new mock instance.
func NewMockMigrationService(ctrl *gomock.Controller) *MockMigrationService {
	mock := &MockMigrationService{ctrl: ctrl}
	mock.recorder = &MockMigrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationService) EXPECT() *MockMigrationServiceMockRecorder {
	return m.recorder
}

// Migrate mocks base method.
func (m *MockMigrationService) Migrate(transactions []*domain.Transaction, fileName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Migrate", transactions, fileName)
}

// Migrate indicates an expected call of Migrate.
func (mr *MockMigrationServiceMockRecorder) Migrate(transactions, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockMigrationService)(nil).Migrate), transactions, fileName)
}

// ValidateData mocks base method.
func (m *MockMigrationService) ValidateData(data [][]string) ([]*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateData", data)
	ret0, _ := ret[0].([]*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateData indicates an expected call of ValidateData.
func (mr *MockMigrationServiceMockRecorder) ValidateData(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateData", reflect.TypeOf((*MockMigrationService)(nil).ValidateData), data)
}

// ValidateFileHeaders mocks base method.
func (m *MockMigrationService) ValidateFileHeaders(data []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateFileHeaders", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateFileHeaders indicates an expected call of ValidateFileHeaders.
func (mr *MockMigrationServiceMockRecorder) ValidateFileHeaders(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateFileHeaders", reflect.TypeOf((*MockMigrationService)(nil).ValidateFileHeaders), data)
}

// MockMigrationRepository is a mock of MigrationRepository interface.
type MockMigrationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationRepositoryMockRecorder
	isgomock struct{}
}

// MockMigrationRepositoryMockRecorder is the mock recorder for MockMigrationRepository.
type MockMigrationRepositoryMockRecorder struct {
	mock *MockMigrationRepository
}

// NewMockMigrationRepository creates a new mock instance.
func NewMockMigrationRepository(ctrl *gomock.Controller) *MockMigrationRepository {
	mock := &MockMigrationRepository{ctrl: ctrl}
	mock.recorder = &MockMigrationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationRepository) EXPECT() *MockMigrationRepositoryMockRecorder {
	return m.recorder
}

// InsertMany mocks base method.
func (m *MockMigrationRepository) InsertMany(t []*domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMany", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockMigrationRepositoryMockRecorder) InsertMany(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockMigrationRepository)(nil).InsertMany), t)
}
