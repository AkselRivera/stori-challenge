// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ports/email.go
//
// Generated by this command:
//
//	mockgen -destination mocks/email.go -source pkg/ports/email.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/AkselRivera/stori-challenge/migration-service/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailService is a mock of EmailService interface.
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
	isgomock struct{}
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService.
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance.
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailService) SendEmail(emailData domain.EmailData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", emailData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailServiceMockRecorder) SendEmail(emailData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailService)(nil).SendEmail), emailData)
}
